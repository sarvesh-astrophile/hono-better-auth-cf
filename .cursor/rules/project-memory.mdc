---
description: Project Memory
globs:
alwaysApply: true
---
# AGENTS.md - Project Memory

## Project Overview

**Project Name:** hono-better-auth-cf  
**Type:** Cloudflare Workers application with Hono framework and Better Auth integration  
**Purpose:** A serverless authentication system built on Cloudflare Workers using Hono web framework and Better Auth library  

## Architecture & Technology Stack

### Core Technologies
- **Runtime:** Cloudflare Workers (serverless edge computing)
- **Web Framework:** Hono v4.9.5 (lightweight, fast web framework for edge runtimes)
- **Authentication:** Better Auth v1.3.7 (modern authentication library)
- **Database:** Cloudflare D1 (SQLite-based serverless database)
- **ORM:** Drizzle ORM v0.44.5 (TypeScript ORM with excellent TypeScript support)
- **Language:** TypeScript with ESNext target
- **Package Manager:** bun (primary package manager)

### Development Tools
- **Wrangler v4.33.1:** Cloudflare Workers CLI for development and deployment
- **Drizzle Kit v0.31.4:** Database migration and schema management
- **TSX v4.20.5:** TypeScript execution for development
- **Cloudflare Workers Types v4.20250830.0:** TypeScript definitions for Cloudflare Workers

## Project Structure

```
hono-better-auth-cf/
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ index.ts              # Main application entry point with Better Auth integration
â”‚   â”œâ”€â”€ lib/
â”‚   â”‚   â””â”€â”€ auth.ts          # Better Auth configuration and setup
â”‚   â””â”€â”€ db/
â”‚       â”œâ”€â”€ db.ts            # Database connection setup
â”‚       â””â”€â”€ schema.ts        # Database schema definitions (Better Auth tables)
â”œâ”€â”€ drizzle/
â”‚   â””â”€â”€ migrations/          # Database migration files
â”‚       â”œâ”€â”€ 0000_whole_tag.sql # Initial database schema migration
â”‚       â”œâ”€â”€ 0001_modern_amazoness.sql # Additional migration
â”‚       â””â”€â”€ meta/            # Migration metadata
â”œâ”€â”€ .cursor/
â”‚   â””â”€â”€ rules/
â”‚       â””â”€â”€ project-memory.mdc # Project documentation and memory
â”œâ”€â”€ drizzle.config.ts        # Drizzle Kit configuration
â”œâ”€â”€ package.json             # Dependencies and scripts
â”œâ”€â”€ tsconfig.json           # TypeScript configuration
â”œâ”€â”€ wrangler.jsonc          # Cloudflare Workers configuration
â”œâ”€â”€ worker-configuration.d.ts # Generated Cloudflare bindings types
â”œâ”€â”€ index.http              # HTTP test file
â”œâ”€â”€ LICENSE                 # MIT License
â”œâ”€â”€ README.md               # Basic project documentation
â”œâ”€â”€ AGENTS.md               # Project documentation
â”œâ”€â”€ Sensei.md               # Additional documentation
â””â”€â”€ Sensei.pdf              # PDF documentation
```

## Database Configuration

### D1 Database Setup
- **Database Name:** hono-better-auth-cf
- **Database ID:** 681d551e-9b58-4ed0-8ffa-1d39eb0347df
- **Binding:** hono_better_auth_cf
- **Migrations Directory:** drizzle/migrations (created with initial migration)

### Current Schema
```typescript
// src/db/schema.ts - Better Auth tables
export const user = sqliteTable("user", {
  id: text("id").primaryKey(),
  name: text("name").notNull(),
  email: text("email").notNull().unique(),
  emailVerified: integer("email_verified", { mode: "boolean" })
    .$defaultFn(() => false)
    .notNull(),
  image: text("image"),
  createdAt: integer("created_at", { mode: "timestamp" })
    .$defaultFn(() => new Date())
    .notNull(),
  updatedAt: integer("updated_at", { mode: "timestamp" })
    .$defaultFn(() => new Date())
    .notNull(),
});

export const session = sqliteTable("session", {
  id: text("id").primaryKey(),
  expiresAt: integer("expires_at", { mode: "timestamp" }).notNull(),
  token: text("token").notNull().unique(),
  createdAt: integer("created_at", { mode: "timestamp" }).notNull(),
  updatedAt: integer("updated_at", { mode: "timestamp" }).notNull(),
  ipAddress: text("ip_address"),
  userAgent: text("user_agent"),
  userId: text("user_id")
    .notNull()
    .references(() => user.id, { onDelete: "cascade" }),
});

export const account = sqliteTable("account", {
  id: text("id").primaryKey(),
  accountId: text("account_id").notNull(),
  providerId: text("provider_id").notNull(),
  userId: text("user_id")
    .notNull()
    .references(() => user.id, { onDelete: "cascade" }),
  accessToken: text("access_token"),
  refreshToken: text("refresh_token"),
  idToken: text("id_token"),
  accessTokenExpiresAt: integer("access_token_expires_at", {
    mode: "timestamp",
  }),
  refreshTokenExpiresAt: integer("refresh_token_expires_at", {
    mode: "timestamp",
  }),
  scope: text("scope"),
  password: text("password"),
  createdAt: integer("created_at", { mode: "timestamp" }).notNull(),
  updatedAt: integer("updated_at", { mode: "timestamp" }).notNull(),
});

export const verification = sqliteTable("verification", {
  id: text("id").primaryKey(),
  identifier: text("identifier").notNull(),
  value: text("value").notNull(),
  expiresAt: integer("expires_at", { mode: "timestamp" }).notNull(),
  createdAt: integer("created_at", { mode: "timestamp" }).$defaultFn(
    () => new Date(),
  ),
  updatedAt: integer("updated_at", { mode: "timestamp" }).$defaultFn(
    () => new Date(),
  ),
});
```

### Database Connection
```typescript
// src/db/db.ts
export const db = (d1: D1Database) => {
  return drizzle(d1, { schema, casing: 'snake_case' });
};
```

## Configuration Files

### Wrangler Configuration (wrangler.jsonc)
- **Compatibility Date:** 2024-09-26
- **Main Entry:** src/index.ts
- **Node.js Compatibility:** Enabled with nodejs_compat flag
- **D1 Database:** Configured with binding and migration directory
- **Commented Options:** Environment variables, KV namespaces, R2 buckets, AI bindings, observability

### Drizzle Configuration (drizzle.config.ts)
- **Output Directory:** ./drizzle
- **Schema Source:** ./src/db/schema.ts
- **Dialect:** SQLite with D1 HTTP driver
- **Casing:** snake_case (consistent with database naming)
- **Credentials:** Environment variables for Cloudflare account ID, database ID, and D1 token

### TypeScript Configuration (tsconfig.json)
- **Target:** ESNext
- **Module:** ESNext with Bundler resolution
- **JSX:** React JSX with Hono JSX import source
- **Path Mapping:** @/* â†’ ./src/*
- **Strict Mode:** Enabled

## Available Scripts

### Development
- `bun start` / `bun run dev` - Start development server with Wrangler
- `bun run cf-typegen` - Generate Cloudflare Workers types

### Database Management
- `bun run db:generate` - Generate database migrations with Drizzle Kit
- `bun run db:migrate:local` - Apply migrations to local D1 database
- `bun run db:migrate:prod` - Apply migrations to production D1 database
- `bun run db:check` - Check database schema consistency
- `bun run db:studio` - Open Drizzle Studio for database management

### Deployment
- `bun run deploy` - Deploy to Cloudflare Workers with minification

## Recent Changes & Current API

### Latest Updates
- **Better Auth Integration:** Fully integrated Better Auth with Hono application
- **Database Schema:** Updated to Better Auth standard tables (user, session, account, verification)
- **Authentication Routes:** Implemented `/api/auth/**` endpoints for authentication
- **Migration Setup:** Created database migrations for Better Auth tables
- **Drizzle Configuration:** Added drizzle.config.ts for database management

### Current API Endpoints
```typescript
// Main application entry point (src/index.ts)
GET  /                    // Returns "Hello Hono!"
POST/GET /api/auth/**     // Better Auth authentication endpoints
```

### Better Auth Configuration
```typescript
// src/lib/auth.ts
export function createAuth(d1Database: D1Database) {
  return betterAuth({
    database: drizzleAdapter(db(d1Database), {
      provider: "sqlite"
    }),
    emailAndPassword: {
      enabled: true,
    },
    plugins: [
      openAPI(),
    ],
  });
}
```

### Database Migration Status
- **Migration Files:** 
  - `drizzle/migrations/0000_whole_tag.sql` - Initial migration
  - `drizzle/migrations/0001_modern_amazoness.sql` - Additional migration
- **Schema:** Better Auth tables (user, session, account, verification)
- **Status:** Generated and ready for application

## Current Implementation Status

### Completed
- âœ… Basic Hono application setup
- âœ… Drizzle ORM integration with D1
- âœ… Better Auth integration with Hono
- âœ… Database schema definition (Better Auth tables)
- âœ… Cloudflare Workers configuration
- âœ… TypeScript setup with proper types
- âœ… Development environment configuration
- âœ… Database migrations setup with Better Auth schema
- âœ… Authentication API endpoints (`/api/auth/**`)
- âœ… Drizzle Kit configuration for database management
- âœ… Better Auth configuration with email/password authentication
- âœ… OpenAPI plugin integration

### In Progress / Next Steps
- ðŸ”„ Apply database migrations to local/production environments
- ðŸ”„ Test authentication endpoints
- ðŸ”„ Implement additional authentication providers (OAuth, social login)
- ðŸ”„ Add user management and profile features

## Development Environment

### Local Development
- **URL:** http://localhost:8787/ (as defined in index.http)
- **Command:** `bun run dev` or `bun start`
- **Database:** Local D1 instance via Wrangler

### Deployment
- **Platform:** Cloudflare Workers
- **Command:** `bun run deploy`
- **Database:** Production D1 instance

## Key Dependencies Analysis

### Better Auth (v1.3.7)
- Modern authentication library with TypeScript support
- Integrates well with Drizzle ORM
- Supports multiple authentication strategies
- **Status:** Fully integrated with email/password authentication enabled
- **Features:** OpenAPI plugin, session management, user verification

### Hono (v4.9.5)
- Lightweight web framework optimized for edge runtimes
- Excellent TypeScript support
- Fast and efficient for serverless environments
- **Current Endpoints:**
  - `GET /` - Basic "Hello Hono!" endpoint
  - `POST/GET /api/auth/**` - Better Auth authentication endpoints

### Drizzle ORM (v0.44.5)
- Type-safe database ORM
- Excellent TypeScript integration
- Supports SQLite (D1) with proper schema management
- Snake case naming convention configured

## Environment & Bindings

### Cloudflare Bindings
```typescript
interface CloudflareBindings {
  hono_better_auth_cf: D1Database;
}
```

### Type Generation
- Types are auto-generated via `wrangler types --env-interface CloudflareBindings`
- Stored in `worker-configuration.d.ts`
- Hash: 1995825b0dc762edee2dfd2010bfe04f

## Project Goals & Roadmap

### Immediate Goals
1. **Apply Database Migrations** - Run migrations on local and production D1 databases
2. **Test Authentication Endpoints** - Verify Better Auth endpoints work correctly
3. **User Registration/Login** - Test user registration and login flows
4. **Session Management** - Verify session creation and management
5. **API Documentation** - Test OpenAPI plugin functionality

### Future Enhancements
- Multi-provider authentication (OAuth, social login)
- Role-based access control
- Session management and refresh tokens
- API rate limiting and security middleware
- User profile management
- Password reset functionality

## Development Notes

### File Naming Conventions
- Database tables use snake_case (configured in Drizzle)
- TypeScript files use camelCase
- Configuration files use kebab-case

### Git Configuration
- Uses standard .gitignore for Node.js projects
- Excludes .wrangler directory and environment files
- Includes proper IDE exclusions

### Performance Considerations
- Optimized for Cloudflare Workers edge runtime
- Minimal bundle size with tree-shaking
- Efficient database queries with Drizzle ORM
- TypeScript for compile-time optimizations

## Security Considerations

### Current State
- Basic project setup with no sensitive data exposed
- Environment variables properly excluded from git
- TypeScript strict mode enabled for type safety

### Future Security Measures
- Authentication token validation
- CORS configuration
- Rate limiting implementation
- Input validation and sanitization
- Secure session management

## Troubleshooting & Common Issues

### Database Issues
- Ensure D1 database is created in Cloudflare dashboard
- Run migrations before starting development: `bun run db:migrate:local`
- Check database binding in wrangler.jsonc
- Verify migration files exist in drizzle/migrations directory
- Test database connectivity with Better Auth endpoints

### Development Issues
- Clear .wrangler cache if experiencing issues
- Regenerate types with `bun run cf-typegen`
- Check TypeScript configuration for path resolution
- Ensure drizzle.config.ts has correct database credentials for production

### Deployment Issues
- Verify database ID in wrangler.jsonc
- Ensure all migrations are applied to production: `bun run db:migrate:prod`
- Check Cloudflare Workers limits and quotas
- Test API endpoints after deployment to ensure database connectivity


---

**Last Updated:** January 2025  
**Project Version:** Better Auth integration complete  
**Maintainer:** Development Team