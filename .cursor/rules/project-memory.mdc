---
description:
globs:
alwaysApply: true
---
# AGENTS.md - Project Memory

## Project Overview

**Project Name:** hono-better-auth-cf  
**Type:** Cloudflare Workers application with Hono framework and Better Auth integration  
**Purpose:** A serverless authentication system built on Cloudflare Workers using Hono web framework and Better Auth library  

## Architecture & Technology Stack

### Core Technologies
- **Runtime:** Cloudflare Workers (serverless edge computing)
- **Web Framework:** Hono v4.9.5 (lightweight, fast web framework for edge runtimes)
- **Authentication:** Better Auth v1.3.7 (modern authentication library)
- **Database:** Cloudflare D1 (SQLite-based serverless database)
- **ORM:** Drizzle ORM v0.44.5 (TypeScript ORM with excellent TypeScript support)
- **Language:** TypeScript with ESNext target
- **Package Manager:** bun (with bun.lock present, suggesting bun compatibility)

### Development Tools
- **Wrangler v4.33.1:** Cloudflare Workers CLI for development and deployment
- **Drizzle Kit v0.31.4:** Database migration and schema management
- **TSX v4.20.5:** TypeScript execution for development
- **Cloudflare Workers Types v4.20250830.0:** TypeScript definitions for Cloudflare Workers

## Project Structure

```
hono-better-auth-cf/
â”œâ”€â”€ src/
â”‚   â”œâ”€â”€ index.ts              # Main application entry point with API endpoints
â”‚   â””â”€â”€ db/
â”‚       â”œâ”€â”€ db.ts            # Database connection setup
â”‚       â””â”€â”€ schema.ts        # Database schema definitions
â”œâ”€â”€ drizzle/
â”‚   â””â”€â”€ migrations/          # Database migration files
â”‚       â”œâ”€â”€ 0000_whole_tag.sql # Initial database schema migration
â”‚       â””â”€â”€ meta/            # Migration metadata
â”œâ”€â”€ .cursor/
â”‚   â””â”€â”€ rules/
â”‚       â””â”€â”€ project-memory.mdc # Project documentation and memory
â”œâ”€â”€ drizzle.config.ts        # Drizzle Kit configuration
â”œâ”€â”€ package.json             # Dependencies and scripts
â”œâ”€â”€ tsconfig.json           # TypeScript configuration
â”œâ”€â”€ wrangler.jsonc          # Cloudflare Workers configuration
â”œâ”€â”€ worker-configuration.d.ts # Generated Cloudflare bindings types
â”œâ”€â”€ index.http              # HTTP test file
â”œâ”€â”€ LICENSE                 # MIT License
â””â”€â”€ README.md               # Basic project documentation
```

## Database Configuration

### D1 Database Setup
- **Database Name:** hono-better-auth-cf
- **Database ID:** 681d551e-9b58-4ed0-8ffa-1d39eb0347df
- **Binding:** hono_better_auth_cf
- **Migrations Directory:** drizzle/migrations (created with initial migration)

### Current Schema
```typescript
// src/db/schema.ts
export const usersTable = sqliteTable("users_table", {
  id: int().primaryKey({ autoIncrement: true }),
  name: text().notNull(),
  age: int().notNull(),
  email: text().notNull().unique(),
});
```

### Database Connection
```typescript
// src/db/db.ts
export const db = (d1: D1Database) => {
  return drizzle(d1, { schema, casing: 'snake_case' });
};
```

## Configuration Files

### Wrangler Configuration (wrangler.jsonc)
- **Compatibility Date:** 2025-08-30
- **Main Entry:** src/index.ts
- **D1 Database:** Configured with binding and migration directory
- **Commented Options:** Node.js compatibility, environment variables, KV namespaces, R2 buckets, AI bindings, observability

### Drizzle Configuration (drizzle.config.ts)
- **Output Directory:** ./drizzle/migrations
- **Schema Source:** ./src/db/schema.ts
- **Dialect:** SQLite with D1 HTTP driver
- **Casing:** snake_case (consistent with database naming)
- **Credentials:** Placeholder values for development

### TypeScript Configuration (tsconfig.json)
- **Target:** ESNext
- **Module:** ESNext with Bundler resolution
- **JSX:** React JSX with Hono JSX import source
- **Path Mapping:** @/* â†’ ./src/*
- **Strict Mode:** Enabled

## Available Scripts

### Development
- `bun start` / `bun run dev` - Start development server with Wrangler
- `bun run cf-typegen` - Generate Cloudflare Workers types

### Database Management
- `bun run db:generate` - Generate database migrations with Drizzle Kit
- `bun run db:migrate:local` - Apply migrations to local D1 database
- `bun run db:migrate:prod` - Apply migrations to production D1 database
- `bun run db:check` - Check database schema consistency
- `bun run db:studio` - Open Drizzle Studio for database management

### Deployment
- `bun run deploy` - Deploy to Cloudflare Workers with minification

## Recent Changes & Current API

### Latest Updates
- **Database Integration:** Added database connection and basic CRUD operations
- **Migration Setup:** Created initial database migration with users table
- **API Endpoints:** Implemented user management endpoints
- **Drizzle Configuration:** Added drizzle.config.ts for database management

### Current API Endpoints
```typescript
// Main application entry point (src/index.ts)
GET  /              // Returns "Hello Hono!"
GET  /users         // Retrieves all users from database
GET  /add-users     // Inserts a sample user (John Doe)
```

### Database Migration Status
- **Migration File:** `drizzle/migrations/0000_whole_tag.sql`
- **Schema:** Creates `users_table` with id, name, age, email fields
- **Index:** Unique index on email field
- **Status:** Generated but not yet applied to databases

## Current Implementation Status

### Completed
- âœ… Basic Hono application setup
- âœ… Drizzle ORM integration with D1
- âœ… Database schema definition (users table)
- âœ… Cloudflare Workers configuration
- âœ… TypeScript setup with proper types
- âœ… Development environment configuration
- âœ… Database migrations setup with initial migration
- âœ… Basic API endpoints for user management
- âœ… Drizzle Kit configuration for database management

### In Progress / Next Steps
- ðŸ”„ Better Auth integration (not yet implemented in main app)
- ðŸ”„ Authentication routes and middleware
- ðŸ”„ User authentication flow implementation
- ðŸ”„ Apply database migrations to local/production environments

## Development Environment

### Local Development
- **URL:** http://localhost:8787/ (as defined in index.http)
- **Command:** `bun run dev` or `bun start`
- **Database:** Local D1 instance via Wrangler

### Deployment
- **Platform:** Cloudflare Workers
- **Command:** `bun run deploy`
- **Database:** Production D1 instance

## Key Dependencies Analysis

### Better Auth (v1.3.7)
- Modern authentication library with TypeScript support
- Integrates well with Drizzle ORM
- Supports multiple authentication strategies
- **Note:** Not yet integrated into the main application

### Hono (v4.9.5)
- Lightweight web framework optimized for edge runtimes
- Excellent TypeScript support
- Fast and efficient for serverless environments
- **Current Endpoints:**
  - `GET /` - Basic "Hello Hono!" endpoint
  - `GET /users` - Retrieve all users from database
  - `GET /add-users` - Insert a sample user into database

### Drizzle ORM (v0.44.5)
- Type-safe database ORM
- Excellent TypeScript integration
- Supports SQLite (D1) with proper schema management
- Snake case naming convention configured

## Environment & Bindings

### Cloudflare Bindings
```typescript
interface CloudflareBindings {
  hono_better_auth_cf: D1Database;
}
```

### Type Generation
- Types are auto-generated via `wrangler types --env-interface CloudflareBindings`
- Stored in `worker-configuration.d.ts`
- Hash: 1995825b0dc762edee2dfd2010bfe04f

## Project Goals & Roadmap

### Immediate Goals
1. **Apply Database Migrations** - Run migrations on local and production D1 databases
2. **Integrate Better Auth** - Set up authentication middleware and routes
3. **User Management** - Implement user registration, login, and session management
4. **API Endpoints** - Create authentication-related API endpoints
5. **Test Database Operations** - Verify user creation and retrieval endpoints work correctly

### Future Enhancements
- Multi-provider authentication (OAuth, social login)
- Role-based access control
- Session management and refresh tokens
- API rate limiting and security middleware
- User profile management
- Password reset functionality

## Development Notes

### File Naming Conventions
- Database tables use snake_case (configured in Drizzle)
- TypeScript files use camelCase
- Configuration files use kebab-case

### Git Configuration
- Uses standard .gitignore for Node.js projects
- Excludes .wrangler directory and environment files
- Includes proper IDE exclusions

### Performance Considerations
- Optimized for Cloudflare Workers edge runtime
- Minimal bundle size with tree-shaking
- Efficient database queries with Drizzle ORM
- TypeScript for compile-time optimizations

## Security Considerations

### Current State
- Basic project setup with no sensitive data exposed
- Environment variables properly excluded from git
- TypeScript strict mode enabled for type safety

### Future Security Measures
- Authentication token validation
- CORS configuration
- Rate limiting implementation
- Input validation and sanitization
- Secure session management

## Troubleshooting & Common Issues

### Database Issues
- Ensure D1 database is created in Cloudflare dashboard
- Run migrations before starting development: `npm run db:migrate:local`
- Check database binding in wrangler.jsonc
- Verify migration files exist in drizzle/migrations directory
- Test database connectivity with `/users` and `/add-users` endpoints

### Development Issues
- Clear .wrangler cache if experiencing issues
- Regenerate types with `npm run cf-typegen`
- Check TypeScript configuration for path resolution
- Ensure drizzle.config.ts has correct database credentials for production

### Deployment Issues
- Verify database ID in wrangler.jsonc
- Ensure all migrations are applied to production: `npm run db:migrate:prod`
- Check Cloudflare Workers limits and quotas
- Test API endpoints after deployment to ensure database connectivity


---

**Last Updated:** January 2025  
**Project Version:** Database integration and API endpoints  
**Maintainer:** Development Team